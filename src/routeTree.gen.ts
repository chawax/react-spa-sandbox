/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as MoviesTrendingImport } from './routes/movies/trending'
import { Route as MoviesSearchImport } from './routes/movies/search'
import { Route as MoviesPopularImport } from './routes/movies/popular'
import { Route as MoviesMovieIdImport } from './routes/movies/$movieId'
import { Route as profileProfileImport } from './routes/(profile)/profile'
import { Route as profileProfileSettingsImport } from './routes/(profile)/profile.settings'
import { Route as profileProfileMessagesImport } from './routes/(profile)/profile.messages'
import { Route as profileProfileInfosImport } from './routes/(profile)/profile.infos'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MoviesTrendingRoute = MoviesTrendingImport.update({
  id: '/movies/trending',
  path: '/movies/trending',
  getParentRoute: () => rootRoute,
} as any)

const MoviesSearchRoute = MoviesSearchImport.update({
  id: '/movies/search',
  path: '/movies/search',
  getParentRoute: () => rootRoute,
} as any)

const MoviesPopularRoute = MoviesPopularImport.update({
  id: '/movies/popular',
  path: '/movies/popular',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/movies/popular.lazy').then((d) => d.Route),
)

const MoviesMovieIdRoute = MoviesMovieIdImport.update({
  id: '/movies/$movieId',
  path: '/movies/$movieId',
  getParentRoute: () => rootRoute,
} as any)

const profileProfileRoute = profileProfileImport.update({
  id: '/(profile)/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const profileProfileSettingsRoute = profileProfileSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => profileProfileRoute,
} as any)

const profileProfileMessagesRoute = profileProfileMessagesImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => profileProfileRoute,
} as any)

const profileProfileInfosRoute = profileProfileInfosImport.update({
  id: '/infos',
  path: '/infos',
  getParentRoute: () => profileProfileRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(profile)/profile': {
      id: '/(profile)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof profileProfileImport
      parentRoute: typeof rootRoute
    }
    '/movies/$movieId': {
      id: '/movies/$movieId'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof MoviesMovieIdImport
      parentRoute: typeof rootRoute
    }
    '/movies/popular': {
      id: '/movies/popular'
      path: '/movies/popular'
      fullPath: '/movies/popular'
      preLoaderRoute: typeof MoviesPopularImport
      parentRoute: typeof rootRoute
    }
    '/movies/search': {
      id: '/movies/search'
      path: '/movies/search'
      fullPath: '/movies/search'
      preLoaderRoute: typeof MoviesSearchImport
      parentRoute: typeof rootRoute
    }
    '/movies/trending': {
      id: '/movies/trending'
      path: '/movies/trending'
      fullPath: '/movies/trending'
      preLoaderRoute: typeof MoviesTrendingImport
      parentRoute: typeof rootRoute
    }
    '/(profile)/profile/infos': {
      id: '/(profile)/profile/infos'
      path: '/infos'
      fullPath: '/profile/infos'
      preLoaderRoute: typeof profileProfileInfosImport
      parentRoute: typeof profileProfileImport
    }
    '/(profile)/profile/messages': {
      id: '/(profile)/profile/messages'
      path: '/messages'
      fullPath: '/profile/messages'
      preLoaderRoute: typeof profileProfileMessagesImport
      parentRoute: typeof profileProfileImport
    }
    '/(profile)/profile/settings': {
      id: '/(profile)/profile/settings'
      path: '/settings'
      fullPath: '/profile/settings'
      preLoaderRoute: typeof profileProfileSettingsImport
      parentRoute: typeof profileProfileImport
    }
  }
}

// Create and export the route tree

interface profileProfileRouteChildren {
  profileProfileInfosRoute: typeof profileProfileInfosRoute
  profileProfileMessagesRoute: typeof profileProfileMessagesRoute
  profileProfileSettingsRoute: typeof profileProfileSettingsRoute
}

const profileProfileRouteChildren: profileProfileRouteChildren = {
  profileProfileInfosRoute: profileProfileInfosRoute,
  profileProfileMessagesRoute: profileProfileMessagesRoute,
  profileProfileSettingsRoute: profileProfileSettingsRoute,
}

const profileProfileRouteWithChildren = profileProfileRoute._addFileChildren(
  profileProfileRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof profileProfileRouteWithChildren
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/search': typeof MoviesSearchRoute
  '/movies/trending': typeof MoviesTrendingRoute
  '/profile/infos': typeof profileProfileInfosRoute
  '/profile/messages': typeof profileProfileMessagesRoute
  '/profile/settings': typeof profileProfileSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof profileProfileRouteWithChildren
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/search': typeof MoviesSearchRoute
  '/movies/trending': typeof MoviesTrendingRoute
  '/profile/infos': typeof profileProfileInfosRoute
  '/profile/messages': typeof profileProfileMessagesRoute
  '/profile/settings': typeof profileProfileSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/(profile)/profile': typeof profileProfileRouteWithChildren
  '/movies/$movieId': typeof MoviesMovieIdRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/search': typeof MoviesSearchRoute
  '/movies/trending': typeof MoviesTrendingRoute
  '/(profile)/profile/infos': typeof profileProfileInfosRoute
  '/(profile)/profile/messages': typeof profileProfileMessagesRoute
  '/(profile)/profile/settings': typeof profileProfileSettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/profile'
    | '/movies/$movieId'
    | '/movies/popular'
    | '/movies/search'
    | '/movies/trending'
    | '/profile/infos'
    | '/profile/messages'
    | '/profile/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/profile'
    | '/movies/$movieId'
    | '/movies/popular'
    | '/movies/search'
    | '/movies/trending'
    | '/profile/infos'
    | '/profile/messages'
    | '/profile/settings'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/(profile)/profile'
    | '/movies/$movieId'
    | '/movies/popular'
    | '/movies/search'
    | '/movies/trending'
    | '/(profile)/profile/infos'
    | '/(profile)/profile/messages'
    | '/(profile)/profile/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  profileProfileRoute: typeof profileProfileRouteWithChildren
  MoviesMovieIdRoute: typeof MoviesMovieIdRoute
  MoviesPopularRoute: typeof MoviesPopularRoute
  MoviesSearchRoute: typeof MoviesSearchRoute
  MoviesTrendingRoute: typeof MoviesTrendingRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  profileProfileRoute: profileProfileRouteWithChildren,
  MoviesMovieIdRoute: MoviesMovieIdRoute,
  MoviesPopularRoute: MoviesPopularRoute,
  MoviesSearchRoute: MoviesSearchRoute,
  MoviesTrendingRoute: MoviesTrendingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/(profile)/profile",
        "/movies/$movieId",
        "/movies/popular",
        "/movies/search",
        "/movies/trending"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(profile)/profile": {
      "filePath": "(profile)/profile.tsx",
      "children": [
        "/(profile)/profile/infos",
        "/(profile)/profile/messages",
        "/(profile)/profile/settings"
      ]
    },
    "/movies/$movieId": {
      "filePath": "movies/$movieId.tsx"
    },
    "/movies/popular": {
      "filePath": "movies/popular.tsx"
    },
    "/movies/search": {
      "filePath": "movies/search.tsx"
    },
    "/movies/trending": {
      "filePath": "movies/trending.tsx"
    },
    "/(profile)/profile/infos": {
      "filePath": "(profile)/profile.infos.tsx",
      "parent": "/(profile)/profile"
    },
    "/(profile)/profile/messages": {
      "filePath": "(profile)/profile.messages.tsx",
      "parent": "/(profile)/profile"
    },
    "/(profile)/profile/settings": {
      "filePath": "(profile)/profile.settings.tsx",
      "parent": "/(profile)/profile"
    }
  }
}
ROUTE_MANIFEST_END */
